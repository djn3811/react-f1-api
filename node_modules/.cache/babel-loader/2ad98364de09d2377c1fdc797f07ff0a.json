{"ast":null,"code":"import _slicedToArray from \"/home/tcsuser/Desktop/DJ/React/react-f1-api/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/tcsuser/Desktop/DJ/React/react-f1-api/src/Races.js\";\nimport React, { useState, useEffect } from 'react';\n\nfunction ChooseRace(match) {\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        results = _useState2[0],\n        setResults = _useState2[1];\n\n  const _useState3 = useState([]),\n        _useState4 = _slicedToArray(_useState3, 2),\n        raceName = _useState4[0],\n        setRaceName = _useState4[1];\n\n  const _useState5 = useState([]),\n        _useState6 = _slicedToArray(_useState5, 2),\n        season = _useState6[0],\n        setSeason = _useState6[1];\n\n  const _useState7 = useState([]),\n        _useState8 = _slicedToArray(_useState7, 2),\n        trackName = _useState8[0],\n        setTrackName = _useState8[1];\n\n  const _useState9 = useState([]),\n        _useState10 = _slicedToArray(_useState9, 2),\n        country = _useState10[0],\n        setCountry = _useState10[1];\n\n  const _useState11 = useState([]),\n        _useState12 = _slicedToArray(_useState11, 2),\n        city = _useState12[0],\n        setCity = _useState12[1]; // var raceName = 'temp';\n\n\n  useEffect(() => {\n    fetchResults(); // console.log('match: ' + JSON.stringify(match));\n    // console.log('match2: ' + match.match.params.gpNum);\n  }, []);\n\n  const fetchResults = async () => {\n    const data = await fetch('https://ergast.com/api/f1/' + match.match.params.year + '/' + match.match.params.gpNum + '/results.json');\n    const results = await data.json();\n    setCity(results.MRData.RaceTable.Races[0].Circuit.Location.locality);\n    setCountry(results.MRData.RaceTable.Races[0].Circuit.Location.country);\n    setTrackName(results.MRData.RaceTable.Races[0].Circuit.circuitName);\n    setSeason(results.MRData.RaceTable.season);\n    setRaceName(results.MRData.RaceTable.Races[0].raceName);\n    console.log('raceName: ' + raceName);\n    var finish = [];\n    var position = 1;\n    results.MRData.RaceTable.Races[0].Results.forEach(driver => {\n      const first = driver.Driver.givenName;\n      const last = driver.Driver.familyName;\n      const fullName = {\n        position,\n        first,\n        last\n      };\n      finish.push(fullName);\n      position++;\n    });\n    setResults(finish);\n    console.log('Results set...');\n    console.log(results);\n    console.log(results.MRData.RaceTable.Races[0].raceName); // setResults(results);\n    // return results;\n  };\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }, season, \" \", raceName, \" Results\"), React.createElement(\"h3\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }, trackName, \" \"), React.createElement(\"h3\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }, city, \", \", country), results.map(name => ({\n    name\n  })));\n}\n\nexport default ChooseRace;","map":{"version":3,"sources":["/home/tcsuser/Desktop/DJ/React/react-f1-api/src/Races.js"],"names":["React","useState","useEffect","ChooseRace","match","results","setResults","raceName","setRaceName","season","setSeason","trackName","setTrackName","country","setCountry","city","setCity","fetchResults","data","fetch","params","year","gpNum","json","MRData","RaceTable","Races","Circuit","Location","locality","circuitName","console","log","finish","position","Results","forEach","driver","first","Driver","givenName","last","familyName","fullName","push","map","name"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react';\n\n\n\nfunction ChooseRace(match) {\n\n    \n    const [results, setResults] = useState([]);\n    const [raceName, setRaceName] = useState([]);\n    const [season, setSeason] = useState([]);\n    const [trackName, setTrackName] = useState([]);\n    const [country, setCountry] = useState([]);\n    const [city, setCity] = useState([]);\n\n\n    // var raceName = 'temp';\n\n    \n    useEffect(() => {\n        fetchResults();\n        // console.log('match: ' + JSON.stringify(match));\n        // console.log('match2: ' + match.match.params.gpNum);\n    }, []);\n\n\n    const fetchResults = async () => {\n        const data = await fetch('https://ergast.com/api/f1/'+match.match.params.year+'/'+match.match.params.gpNum+'/results.json');\n\n  \n         \n        const results = await data.json();\n\n        setCity(results.MRData.RaceTable.Races[0].Circuit.Location.locality)\n        setCountry(results.MRData.RaceTable.Races[0].Circuit.Location.country)\n        setTrackName(results.MRData.RaceTable.Races[0].Circuit.circuitName);\n        setSeason(results.MRData.RaceTable.season);\n        setRaceName(results.MRData.RaceTable.Races[0].raceName);\n        console.log('raceName: ' + raceName)\n        var finish = [];\n        var position = 1;\n        results.MRData.RaceTable.Races[0].Results.forEach(driver => {\n            const first = driver.Driver.givenName\n            const last = driver.Driver.familyName\n            const fullName = {position, first, last}\n            finish.push(fullName)\n            position++;\n        });\n        setResults(finish);\n        console.log('Results set...')\n        console.log(results)\n        console.log(results.MRData.RaceTable.Races[0].raceName)\n \n        // setResults(results);\n\n        // return results;\n\n    }; \n    \n\n    \n    return (\n        <div>\n            {/* <select>\n                <option value='2008'>2008</option>\n            </select>\n            <select>\n                <option value='5'>5</option>\n            </select> */}\n            <h1>{season} {raceName} Results</h1>\n            <h3>{trackName} </h3>\n            <h3>{city}, {country}</h3>\n            {results.map(name =>(\n                {name}\n            ))}\n\n        </div>\n    )\n\n\n}\n\nexport default ChooseRace;"]},"metadata":{},"sourceType":"module"}